import React, { useState } from "react";
import {
  PlusOutlined,
  MinusCircleOutlined,
  RollbackOutlined,
  UploadOutlined,
} from "@ant-design/icons";
import {
  Button,
  Form,
  Input,
  message,
  Select,
  Space,
  Upload,
  Image,
  InputNumber,
} from "antd";
import { Link } from "react-router-dom";
import useCategoryQuery from "../../../hooks/Category/useCategoryQuery";
import useProductMutation from "../../../hooks/Product/useProductMutation";

const CreateProduct = () => {
  const { data: categories } = useCategoryQuery();
  const [messageApi, contextHolder] = message.useMessage();
  const [form] = Form.useForm();

const {mutate:createProduct}= useProductMutation({
  action:"CREATE",
  onSuccess:()=>{
    form.resetFields();

    messageApi.success("Thêm sản phẩm thành công")
  },
  onError:(error)=>{
     messageApi.error(`Lỗi khi thêm danh mục: ${error.response.data.message}`);

  }
})

  const onFinish = (product) => {
    console.log(product);
    createProduct(product);
  };

  return (
    <div className="container mx-auto">
      {contextHolder}
      <div className="flex items-center justify-between mb-5">
        <h1 className="text-2xl font-medium">Create Product</h1>
        <Link to="/admin/products">
          <Button className="text-base" type="primary">
            <RollbackOutlined /> Back to List
          </Button>
        </Link>
      </div>
      <div>
        <Form
          form={form}
          name="basic"
          layout="vertical"
          onFinish={onFinish}
          initialValues={{ attributes: [{}] }}
        >
          <div className="grid grid-cols-[auto,300px] gap-8">
            <div>
              <Form.Item label="Name" name="name" rules={[{ required: true }]}>
                <Input />
              </Form.Item>

              {/* New Thumbnail Upload Field */}
              <Form.Item
                label="Thumbnail"
                name="thumbnail"
                rules={[
                  {
                    required: true,
                    message: "Please upload a thumbnail image",
                  },

                ]}
              >
                <Upload
                  listType="picture-card"
                  maxCount={1}
                  beforeUpload={() => false}
                >
                  <div>
                    <PlusOutlined />
                    <div style={{ marginTop: 8 }}>Upload</div>
                  </div>
                </Upload>
              </Form.Item>

              <div className="grid grid-cols-3 gap-x-8 ">
                <Form.Item label="Sku" name="sku" rules={[{ required: true }]}>
                  <Input />
                </Form.Item>
                <Form.Item
                  label="Regular price"
                  name="regular_price"
                  rules={[
                    { required: true },
                    { type: "number", message: "Nhập số" },
                  ]}
                >
                  <InputNumber />
                </Form.Item>
                <Form.Item
                  label="Reduced price"
                  name="reduced_price"
                  rules={[{ required: true }]}
                >
                  <InputNumber />
                </Form.Item>
                <Form.Item
                  label="Material"
                  name="material"
                  rules={[{ required: true }]}
                >
                  <Input />
                </Form.Item>
              </div>
              <Form.Item
                name="short_description"
                label="Short Description"
                rules={[{ required: true }]}
              >
                <Input.TextArea showCount maxLength={200} />
              </Form.Item>
              <Form.Item
                name="long_description"
                label="Long Description"
                rules={[{ required: true }]}
              >
                <Input.TextArea showCount maxLength={200} />
              </Form.Item>
            </div>

            <Form.Item
              label="Category"
              name="category_id"
              rules={[{ required: true }]}
            >
              <Select
                showSearch
                placeholder="Search to Select"
                optionFilterProp="label"
                filterSort={(optionA, optionB) =>
                  (optionA?.label?.toString() ?? "")
                    .toLowerCase()
                    .localeCompare(
                      (optionB?.label?.toString() ?? "").toLowerCase()
                    )
                }
                options={categories?.data?.map((category) => ({
                  value: category.id,
                  label: category.name,
                }))}
              />
            </Form.Item>
          </div>

          <section>
            <h2 className="mb-2">Attributes</h2>
            <Form.List
              rules={[{ required: true, message: "Please fill attributes" }]}
              name="attributes"
            >
              {(fields, { add, remove }) => (
                <>
                  <Form.Item>
                    <Button
                      type="dashed"
                      onClick={() => add()}
                      block
                      icon={<PlusOutlined />}
                    >
                      Add field
                    </Button>
                  </Form.Item>
                  {fields.map(({ key, name, ...restField }) => (
                    <Space
                      key={key}
                      style={{ display: "flex", marginBottom: 8 }}
                      align="baseline"
                    >
                      <div className="grid grid-cols-6 gap-x-8">
                        <Form.Item

                          {...restField}
                          name={[name, "image"]}
                          label="Image"
                          rules={[
                            { required: true, message: "Vui lòng tải lên ảnh" },
                          ]}
                        >
                          <Upload
                            maxCount={1}
                            listType="picture-card"
                            beforeUpload={() => false}
                          >
                            <div>
                              <UploadOutlined />
                              <div style={{ marginTop: 8 }}>Upload</div>
                            </div>
                          </Upload>
                        </Form.Item>
                        <Form.Item
                          {...restField}
                          label="Color"
                          name={[name, "color_id"]}
                          rules={[{ required: true, message: "Missing color" }]}
                        >
                          <Select
                            showSearch
                            placeholder="Search to Select"
                            optionFilterProp="label"
                            filterSort={(optionA, optionB) =>
                              (optionA?.label?.toString() ?? "")
                                .toLowerCase()
                                .localeCompare(
                                  (
                                    optionB?.label?.toString() ?? ""
                                  ).toLowerCase()
                                )
                            }
                            options={colors?.map((color) => ({
                              value: color.id,
                              label: color.name,
                            }))}
                          />
                        </Form.Item>
                        <Form.Item
                          {...restField}
                          label="Size"
                          name={[name, "size"]}
                          rules={[{ required: true, message: "Missing size" }]}
                        >
                          <Select
                            showSearch
                            placeholder="Search to Select"
                            optionFilterProp="label"
                            filterSort={(optionA, optionB) =>
                              (optionA?.label?.toString() ?? "")
                                .toLowerCase()
                                .localeCompare(
                                  (
                                    optionB?.label?.toString() ?? ""
                                  ).toLowerCase()
                                )
                            }
                            options={sizes?.map((size) => ({
                              value: size.id,
                              label: size.name,
                            }))}
                          />
                        </Form.Item>
                        <Form.Item
                          {...restField}
                          label="Stock quantity"
                          name={[name, "stock_quantity"]}
                          rules={[{ required: true }]}
                        >
                          <Input />
                        </Form.Item>
                        {key === 0 ? (
                          ""
                        ) : (
                          <MinusCircleOutlined onClick={() => remove(name)} className="red" />
                        )}
                      </div>
                    </Space>
                  ))}
                </>
              )}
            </Form.List>
          </section>
          <div className="">
            <Form.Item wrapperCol={{ offset: 6, span: 16 }}>
              <Button
                type="primary"
                htmlType="submit"
                className=" flex bottom-0 right-0 mx-[83px] my-10 fixed "
              >
                Submit
              </Button>
            </Form.Item>
          </div>
        </Form>
      </div>
    </div>
  );
};

export default CreateProduct;
