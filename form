import React, { useState } from "react";
import {
  DeleteOutlined,
  MinusCircleOutlined,
  PlusOutlined,
  RollbackOutlined,
  UploadOutlined,
} from "@ant-design/icons";
import {
  Button,
  Form,
  Input,
  message,
  Select,
  Upload,
  Table,
  InputNumber,
  Col,
  Row,
} from "antd";
import { Link } from "react-router-dom";
import useCategoryQuery from "../../../hooks/Category/useCategoryQuery";
import useProductMutation from "../../../hooks/Product/useProductMutation";
import { uploadFileCloudinary } from "../../../services/cloudinary";
import { colors, sizes } from "../../../../data-example";
import { validateFieldNumber } from "../../../validations/Product";

const CreateProduct = () => {
  const { data: categories } = useCategoryQuery("GET_ALL_CATEGORY");
  const [messageApi, contextHolder] = message.useMessage();
  const [form] = Form.useForm();

  const { mutate: createProduct } = useProductMutation({
    action: "CREATE",
    onSuccess: () => {
      form.resetFields();
      messageApi.success("Thêm sản phẩm thành công");
    },
    onError: (error) => {
      messageApi.error(`Lỗi khi thêm sản phẩm: ${error.response.data.message}`);
    },
    config: {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    },
  });

  const onFinish = async (values) => {
    try {
      console.log(values);

      const image = await uploadFileCloudinary(values.thumbnail[0].thumbUrl);
      // createProduct({ ...values, thumbnail: image });
      console.log({ ...values, thumbnail: image });
    } catch (error) {
      console.log(error);
    }
  };

  const columns = (remove, fields) => [
    {
      title: "Image",
      dataIndex: "image",
      width: 150,
      render: (_, field) => (
        <Form.Item
          name={[field.name, "image"]}
          rules={[{ required: true, message: "Please upload an image" }]}
        >
          <Upload
            maxCount={1}
            listType="picture-card"
            beforeUpload={() => false}
            className="avatar-uploader"
          >
            <div>
              <UploadOutlined className="text-2xl" />
              <div className="mt-2">Upload</div>
            </div>
          </Upload>
        </Form.Item>
      ),
    },
    {
      title: "Color",
      dataIndex: "color_id",
      width: 200,
      render: (_, field) => (
        <Form.Item
          name={[field.name, "color_id"]}
          rules={[{ required: true, message: "Please select a color" }]}
        >
          <Select
            showSearch
            placeholder="Select color"
            optionFilterProp="label"
            className="w-full"
            filterSort={(optionA, optionB) =>
              (optionA?.label?.toString() ?? "")
                .toLowerCase()
                .localeCompare((optionB?.label?.toString() ?? "").toLowerCase())
            }
            options={colors?.map((color) => ({
              value: color.id,
              label: (
                <div className="flex items-center">
                  <div
                    className="w-4 h-4 rounded-full mr-2"
                    style={{ backgroundColor: color.hex }}
                  ></div>
                  {color.name}
                </div>
              ),
            }))}
          />
        </Form.Item>
      ),
    },
    {
      title: "Sizes and Stock",
      dataIndex: "sizes",
      width: 400,
      render: (_, field) => (
        <Form.List name={[field.name, "sizes"]} initialValue={[{}]}>
          {(sizeFields, { add: addSize, remove: removeSize }) => (
            <div className="space-y-2">
              {sizeFields.map((sizeField) => (
                <div
                  key={sizeField.key}
                  className="flex items-center space-x-2"
                >
                  <Form.Item
                    name={[sizeField.name, "size_id"]}
                    rules={[{ required: true, message: "Required" }]}
                    className="mb-0 flex-1"
                  >
                    <Select
                      placeholder="Size"
                      options={sizes?.map((size) => ({
                        value: size.id,
                        label: size.name,
                      }))}
                      className="w-full"
                    />
                  </Form.Item>
                  <Form.Item
                    name={[sizeField.name, "stock_quantity"]}
                    rules={[{ required: true, message: "Required" }]}
                    className="mb-0 flex-1"
                  >
                    <InputNumber
                      placeholder="Stock"
                      min={0}
                      className="w-full"
                    />
                  </Form.Item>
                  {sizeFields.length > 1 && (
                    <MinusCircleOutlined
                      onClick={() => removeSize(sizeField.name)}
                      className="text-red-500 cursor-pointer hover:text-red-700 transition-colors duration-200"
                    />
                  )}
                </div>
              ))}
              <Button
                type="dashed"
                onClick={() => addSize()}
                block
                icon={<PlusOutlined />}
                className="mt-2 h-9"
              >
                Add Size
              </Button>
            </div>
          )}
        </Form.List>
      ),
    },
    {
      title: "Action",
      key: "action",
      width: 100,
      render: (_, field) =>
        fields.length > 1 ? (
          <Button
            danger
            icon={<DeleteOutlined />}
            onClick={() => remove(field.name)}
            className="flex items-center justify-center"
          >
            Delete
          </Button>
        ) : null,
    },
  ];

  return (
    <div className="container mx-auto">
      {contextHolder}
      <div className="flex items-center justify-between mb-5">
        <h1 className="text-2xl font-medium">Create Product</h1>
        <Link to="/admin/products">
          <Button className="text-base" type="primary">
            <RollbackOutlined /> Back to List
          </Button>
        </Link>
      </div>
      <div>
        <Form
          form={form}
          name="basic"
          layout="vertical"
          onFinish={onFinish}
          initialValues={{ attributes: [{}] }}
        >
          <Row gutter={16}>
            <Col span={16}>
              <Row gutter={16}>
                <Col span={16}>
                  <Form.Item
                    label="Name"
                    name="name"
                    rules={[
                      { required: true, message: "Please enter the name" },
                    ]}
                  >
                    <Input />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    label="Category"
                    name="category_id"
                    rules={[
                      { required: true, message: "Please select a category" },
                    ]}
                  >
                    <Select
                      showSearch
                      placeholder="Select a category"
                      optionFilterProp="children"
                      options={categories?.data?.data?.map((category) => ({
                        value: category.id,
                        label: category.name,
                      }))}
                    />
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={8}>
                  <Form.Item
                    name="material"
                    label="Material"
                    rules={[{ required: true }]}
                  >
                    <Input />
                  </Form.Item>
                </Col>

                <Col span={8}>
                  <Form.Item
                    label="Regular price"
                    name="regular_price"
                    rules={[
                      { required: true, message: "Vui lòng nhập giá " },
                      {
                        validator: (_, value) =>
                          validateFieldNumber("giá", value),
                      },
                    ]}
                  >
                    <Input />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item
                    label="Reduced price"
                    name="reduced_price"
                    rules={[{ required: true }]}
                  >
                    <Input />
                  </Form.Item>
                </Col>
              </Row>
              <Form.Item
                name="short_description"
                label="Short Description"
                rules={[{ required: true }]}
              >
                <Input.TextArea showCount maxLength={200} />
              </Form.Item>
              <Form.Item
                name="long_description"
                label="Long Description"
                rules={[{ required: true }]}
              >
                <Input.TextArea showCount maxLength={200} />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label="Thumbnail"
                name="thumbnail"
                valuePropName="fileList"
                getValueFromEvent={(e) => {
                  if (Array.isArray(e)) {
                    return e;
                  }
                  return e && e.fileList;
                }}
                rules={[
                  {
                    required: true,
                    message: "Please upload a thumbnail image",
                  },
                ]}
              >
                <Upload
                  listType="picture-card"
                  maxCount={1}
                  beforeUpload={() => false}
                  previewFile={(file) => {
                    return new Promise((resolve) => {
                      const reader = new FileReader();
                      reader.readAsDataURL(file);
                      reader.onload = () => {
                        resolve(reader.result);
                      };
                    });
                  }}
                >
                  <div>
                    <PlusOutlined />
                    <div style={{ marginTop: 8 }}>Upload</div>
                  </div>
                </Upload>
              </Form.Item>
            </Col>
          </Row>
          {/* <section className="mt-8 space-y-4">
            <Form.List name="attributes" initialValue={[{}]}>
              {(fields, { add, remove }) => (
                <>
                  <Table
                    className="mb-4"
                    columns={columns(remove, fields)}
                    dataSource={fields}
                    pagination={false}
                    rowKey="key"
                    scroll={{ x: "max-content" }}
                    bordered
                    size="middle"
                  />
                  <Form.Item>
                    <Button
                      type="dashed"
                      onClick={() => add({ sizes: [{}] })}
                      block
                      icon={<PlusOutlined />}
                      className="h-12 text-lg"
                    >
                      Add New Variant
                    </Button>
                  </Form.Item>
                </>
              )}
            </Form.List>
          </section> */}
          <div className="">
            <Form.Item wrapperCol={{ offset: 6, span: 16 }}>
              <Button
                type="primary"
                htmlType="submit"
                className=" flex bottom-0 right-0 mx-[83px] my-10 fixed z-10"
              >
                Submit
              </Button>
            </Form.Item>
          </div>
        </Form>
      </div>
    </div>
  );
};

export default CreateProduct;
